#!/usr/bin/env python3

import sys
from Crypto.Cipher import AES
import math

def print_help():
    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        print("""USAGE
            ./mypgp -xor -c -b KEY
            the MESSAGE is read from standard input
            DESCRIPTION
            -xor: computation using XOR algorithm
            -c: MESSAGE is clear, and we want to cipher it
            -b KEY: block mode with KEY for XOR
            MESSAGE and KEY must be of the same size""")
        return True
    return False

def print_error():
    if len(sys.argv) == 1:
        return True
    if len(sys.argv) == 2 and sys.argv[1] not in {"-h", "-xor", "-aes", "-rsa"}:
        return True
    if sys.argv[1] == "-xor" and len(sys.argv) == 5:
        if sys.argv[2] not in {"-c", "-d"} or sys.argv[3] != "-b":
            return True
    return False

def xor(data, key):
    return bytearray(a ^ b for a, b in zip(data, key))

def aes(data, key):
    cipher = AES.new(key, AES.MODE_ECB)
    return cipher.encrypt(data)

def aes_decrypt(data, key):
    cipher = AES.new(key, AES.MODE_ECB)
    return cipher.decrypt(data)

def rsa_keygen(p1, p2):
        n = p1 * p2
        phi = (p1 - 1) * (p2 - 1)
        e = 257
        while(e<phi):
            if (math.gcd(e, phi) == 1):
                break
            else:
                e += 1   

        d = pow(e, -1, phi)
        reverse_n = hex(n)[2:]
        reverse_d = hex(d)[2:]        
        print("public key: " + "0" + hex(e)[2:] + "-" + reverse_n[2:] + reverse_n[:2])
        print("private key: " + reverse_d[2:] + reverse_d[:2] + "-" + reverse_n[2:] + reverse_n[:2])

def my_rsa_encrypt(message, public_key):
    reverse_n = public_key.split("-")[1][2:] + public_key.split("-")[1][:2]
    reverse_e = public_key.split("-")[0][2:] + public_key.split("-")[0][:2]
    message = int(message, 16)

    n = int(reverse_n, 16)
    e = int(reverse_e, 16)
    ciphered_message = pow(message, e, n)
    ciphered_message = (hex(ciphered_message)[2:])
    reversed_ciphered_message = ciphered_message[2:] + ciphered_message[:2]
    return reversed_ciphered_message

def my_rsa_decrypt(ciphered_message, private_key):
    reverse_ciphered_message = ciphered_message[2:] + ciphered_message[:2]
    reverse_n = private_key.split("-")[1][2:] + private_key.split("-")[1][:2]
    reverse_d = private_key.split("-")[0][2:] + private_key.split("-")[0][:2]
    ciphered_message = int(reverse_ciphered_message, 16)

    n = int(reverse_n, 16)
    d = int(reverse_d, 16)
    unciphered = pow(ciphered_message, d, n)
    unciphered = (hex(unciphered)[2:])

    reversed_unciphered_message = unciphered[2:] + unciphered[:2]
    return reversed_unciphered_message

def pgp_encrypt(message, recipient_public_key):
    # Step 1: Generate a random symmetric key
    symmetric_key = bytes.fromhex("00112233445566778899aabbccddeeff")

    # Step 2: Encrypt the symmetric key with the recipient's public key
    encrypted_symmetric_key = my_rsa_encrypt(symmetric_key.hex(), recipient_public_key)

    # Step 3: Encrypt the message with the symmetric key
    encrypted_message = aes(message.encode(), symmetric_key).hex()

    # Step 4: Combine the encrypted symmetric key and the encrypted message
    final_result = encrypted_symmetric_key + encrypted_message

    return final_result

def pgp_decrypt(ciphered_text, recipient_private_key):
    # Step 1: Extract the encrypted symmetric key and encrypted message
    encrypted_symmetric_key = ciphered_text[:256]
    encrypted_message = ciphered_text[256:]

    # Step 2: Decrypt the symmetric key with the recipient's private key
    symmetric_key = bytes.fromhex(my_rsa_decrypt(encrypted_symmetric_key, recipient_private_key))

    # Step 3: Decrypt the message with the symmetric key
    decrypted_message = aes_decrypt(bytes.fromhex(encrypted_message), symmetric_key).decode()

    return decrypted_message

def main():
    if print_help():
        return 0

    if print_error():
        sys.exit(84)

    if "-xor" in sys.argv and "-c" in sys.argv and "-b" in sys.argv:
        key = bytes.fromhex(sys.argv[4])
        message = sys.stdin.buffer.read().decode('utf-8').replace('"', '')
        message = bytes.fromhex(message)

        ciphered_message = xor(message, key).hex()
        sys.stdout.buffer.write(ciphered_message.encode())
        print()
        return 0

    elif "-xor" in sys.argv and "-d" in sys.argv and "-b" in sys.argv:
        key = bytes.fromhex(sys.argv[4])
        message = sys.stdin.buffer.read()[:-1].decode()
        message = bytes.fromhex(message)
        ciphered_message = xor(message, key).hex()
        print(ciphered_message)
        return 0

    elif "-aes" in sys.argv and "-c" in sys.argv and "-b" in sys.argv:
        key = bytes.fromhex(sys.argv[4])
        message = sys.stdin.buffer.read().decode('utf-8').replace('"', '')
        message = bytes.fromhex(message)

        ciphered_message = aes(message, key).hex()
        print(ciphered_message)
        return 0

    elif "-aes" in sys.argv and "-d" in sys.argv and "-b" in sys.argv:
        key = bytes.fromhex(sys.argv[4])
        message = sys.stdin.buffer.read()[:-1].decode()
        message = bytes.fromhex(message)
        ciphered_message = aes_decrypt(message, key).hex()
        print(ciphered_message)
        return 0

    elif "-rsa" in sys.argv and "-g" in sys.argv:
        p1 = int(sys.argv[3], 16)
        p2 = int(sys.argv[4], 16)
        rsa_keygen(p1, p2)
        return 0

    elif "-rsa" in sys.argv and "-c" in sys.argv:
        key = sys.argv[3]
        message = sys.stdin.buffer.read().decode('utf-8').replace('"', '').strip()

        # Encryption
        ciphered_result = my_rsa_encrypt(message, key)
        print(ciphered_result)

    elif "-rsa" in sys.argv and "-d" in sys.argv:
        key = sys.argv[3]
        message = sys.stdin.buffer.read().decode('utf-8').replace('"', '').strip()

        # Decryption
        ciphered_result = my_rsa_decrypt(message, key)
        print(ciphered_result)

    if "-pgp" in sys.argv and "-c" in sys.argv:
        recipient_public_key = sys.argv[3]
        message = sys.stdin.buffer.read().decode('utf-8').replace('"', '').strip()

        # PGP Encryption
        ciphered_result = pgp_encrypt(message, recipient_public_key)
        print(ciphered_result)

    elif "-pgp" in sys.argv and "-d" in sys.argv:
        recipient_private_key = sys.argv[3]
        ciphered_text = sys.stdin.buffer.read().decode('utf-8').replace('"', '').strip()

        # PGP Decryption
        decrypted_result = pgp_decrypt(ciphered_text, recipient_private_key)
        print(decrypted_result)
    
    else:
        print("Invalid arguments. Use './mypgp -h' for help.")
        return 84

if __name__ == "__main__":
    main()

#!/usr/bin/python3

import sys
from math import *

def synthetic(n, i0, i1):
    k = float(1)
    tmp = n
    while (k < 4):
        i = 1
        n = float(tmp)
        while (i < i0):
            n = k * n * ((1000 - n) / 1000)
            if (n < 0):
                n = 0
            i = i + 1
        while (i <= i1):
            if (float(str("%.1f" % (n))) == round(n, 2)):
                print ("%.2f" % k,"%.2f" % n + "0")
            else:
                print("%.2f" % k,"%.2f" % n)
            n = k * n * ((1000 - n) / 1000)
            if (n < 0):
                n = 0
            i = i + 1
        k = k + 0.01

def bonbyx():
    
    if len(sys.argv) == 3:
        n = float(sys.argv[1])
        if (float(sys.argv[2]) < 1 or float(sys.argv[2]) > 4):
            exit(84)
        k = float(sys.argv[2])
        xn = n
        for i in range (1, 101):
            print(i, "%.2f" % xn)
            xn = k * xn * ((1000 - xn) / 1000)
    
    if len(sys.argv) == 4:
        n = float(sys.argv[1])
        i = 0
        try:
            i0 = int(sys.argv[2])
            i1 = int(sys.argv[3])
        except:
            exit(84)
        if (i0 >= i1):
            exit(84)
        synthetic(n, i0, i1)

def main():
    if len(sys.argv) != 3 and len(sys.argv) != 4:
        sys.exit(84)
    bonbyx()
    sys.exit(0)

if __name__ == '__main__':
    main()